---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Timestamp from "../components/Timestamp.astro";
import type { Post } from "../getPosts";
import * as cheerio from "cheerio";

import { allPosts, postFromSlug } from '../lib/ghost';
import { wrapSidenotes } from "../util/sidenotes";
import { highlightCodeBlocks } from "../util/code";
import { processImgTags } from "../util/ghostImages";
import { getImage } from "astro:assets";
import type { PostOrPage } from "@tryghost/content-api";


export interface Props {
  slug: string;
  data: Post;
}

export async function getStaticPaths() {
  const posts = await allPosts();
  return posts.map((post) => ({
    params: { post: `/${post.slug}` },
  }));
}

export async function postToHtml(post: PostOrPage) {
  const withSidenotes = wrapSidenotes(post.html || '');
  let $ = cheerio.load(withSidenotes);
  $ = await highlightCodeBlocks($);
  $ = await processImgTags($);
  return $.html();
}

export async function postSummary(post: PostOrPage) {
  return post.custom_excerpt || post.excerpt;
}

const post = await postFromSlug(Astro.params.post);
const html = await postToHtml(post);
const description = await postSummary(post);
const ogImage = post.feature_image ? await getImage({src: post.feature_image, inferSize: true}) : null;
---

<html lang="en">
  <head>
    <BaseHead title={post.title ?? ''} description={description} />
    <meta property="og:type" content="article" />
    <meta property="og:title" content={post.title} />
    {description && <meta property="og:description" content={description} />}
    {ogImage && <meta property="og:image" content={ogImage.src} />}
    {ogImage && post.feature_image_alt && <meta property="og:image:alt" content={post.feature_image_alt} />}
    <meta property="og:image:alt" content="A shiny red apple with a bite taken out" />
    <meta name="fediverse:creator" content="@esimmler@fosstodon.org" />
    <link rel="canonical" href={`/${post.slug}`} />
    <style>
      .title {
        font-size: 1.5em;
        margin: 0.25em 0;
        padding-top: 0;
        color: #ea7950;
        line-height: 1em;
      }
      article :global(h1, h2, h3, h4, h5) {
        margin: 0.8em 0 0.5em;
        padding-top: 0.7em;
        color: #63ba29;
      }

      article :global(:target a) {
        position: relative;
      }
      article :global(:target a::before) {
        content: "â˜ž";
        position: absolute;
        right: calc(100% + 0.25em);
        top: -0.15em;
      }
      article :global(h1) {
        font-size: 1.5em;
      }
      article :global(h2) {
        font-size: 1.25em;
        color: #ea7950;
      }
      article :global(h3, h4, h5) {
        font-size: 1em;
        color: #885846;
      }
      article :global(p, ul, ol) {
        margin: 0.75em 0 1em;
      }
      .more-tagged {
        text-align: center;

        & .tags {
            justify-content: center;
        }
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <Timestamp ts={post.published_at} />
        <h1 class="title">{post.title}</h1>
        <Fragment set:html={html} />
      </article>
      {post.tags?.length && (<div class="more-tagged">
        <hr />
        <h4>Read more tagged with</h4>
        <div class="tags">
            {post.tags?.map(tag => <a href={`/tag/${tag.slug}`}>{tag.name}</a>)}
        </div>
      </div>)}
    </main>
    <Footer />
  </body>
</html>
